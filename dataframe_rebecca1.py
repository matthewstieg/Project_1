{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Dependencies and Setup\n",
    "import io\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "import time\n",
    "from datetime import datetime\n",
    "\n",
    "from pprint import pprint\n",
    "from census import Census\n",
    "from us import states\n",
    "# Incorporated citipy to determine city based on latitude and longitude\n",
    "from citipy import citipy\n",
    "\n",
    "from config import key\n",
    "from pandas.io.json import json_normalize \n",
    "from config import key\n",
    "c = Census(key, year=2017)\n",
    "c2 = Census(key, year=2011)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2017 Median Income</th>\n",
       "      <th>State</th>\n",
       "      <th>Code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48123.0</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>73181.0</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>56581.0</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>45869.0</td>\n",
       "      <td>Arkansas</td>\n",
       "      <td>05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>71805.0</td>\n",
       "      <td>California</td>\n",
       "      <td>06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   2017 Median Income       State Code\n",
       "0             48123.0     Alabama   01\n",
       "1             73181.0      Alaska   02\n",
       "2             56581.0     Arizona   04\n",
       "3             45869.0    Arkansas   05\n",
       "4             71805.0  California   06"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Pull US Census Data for each State\n",
    "census_data = c.acs1.get((\"NAME\", \"B19013_001E\"), {'for': 'state:*'})\n",
    "census_income_2017 = pd.DataFrame(census_data)\n",
    "\n",
    "census_income_2017 = census_income_2017.rename(columns={\"B19013_001E\": \"2017 Median Income\",\n",
    "                                                        \"NAME\": \"State\",\n",
    "                                                        \"state\": \"Code\"})\n",
    "census_income_2017.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2017 Median Income</th>\n",
       "      <th>State</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48123.0</td>\n",
       "      <td>Alabama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>73181.0</td>\n",
       "      <td>Alaska</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>56581.0</td>\n",
       "      <td>Arizona</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>45869.0</td>\n",
       "      <td>Arkansas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>71805.0</td>\n",
       "      <td>California</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   2017 Median Income       State\n",
       "0             48123.0     Alabama\n",
       "1             73181.0      Alaska\n",
       "2             56581.0     Arizona\n",
       "3             45869.0    Arkansas\n",
       "4             71805.0  California"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dropping passed columns \n",
    "census_income_2017.drop([\"Code\"], axis = 1, inplace = True) \n",
    "  \n",
    "# display \n",
    "census_income_2017.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>B19013_001E</th>\n",
       "      <th>NAME</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41415.0</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67825.0</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>46709.0</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38758.0</td>\n",
       "      <td>Arkansas</td>\n",
       "      <td>05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>57287.0</td>\n",
       "      <td>California</td>\n",
       "      <td>06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   B19013_001E        NAME state\n",
       "0      41415.0     Alabama    01\n",
       "1      67825.0      Alaska    02\n",
       "2      46709.0     Arizona    04\n",
       "3      38758.0    Arkansas    05\n",
       "4      57287.0  California    06"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Pull US Census Data for each State\n",
    "census_data = c2.acs1.get(('NAME', 'B19013_001E'), {'for': 'state:*'})\n",
    "census_income_2011 = pd.DataFrame(census_data)\n",
    "  \n",
    "census_income_2011 = census_income_2011.rename({'Median Census Income': '',\n",
    "                                               'B19013_001E': '2011 Median Income', \n",
    "                                               'NAME': 'State',\n",
    "                                               'state': 'Code'\n",
    "                                               })\n",
    "census_income_2011.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "#census_income_2011.index.name\n",
    "#census_income_2011.head()\n",
    "#print(census_income_2011.index.name)#None\n",
    "#print(census_income_2011.columns.name)\n",
    "#print(census_income_2011.columns.name)None\n",
    "#print(census_income_2011.index.names)[None]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>2011 Median Income</th>\n",
       "      <th>2017 Median Income</th>\n",
       "      <th>Code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>41415.0</td>\n",
       "      <td>48123.0</td>\n",
       "      <td>01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>67825.0</td>\n",
       "      <td>73181.0</td>\n",
       "      <td>02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>46709.0</td>\n",
       "      <td>56581.0</td>\n",
       "      <td>04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>38758.0</td>\n",
       "      <td>45869.0</td>\n",
       "      <td>05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>57287.0</td>\n",
       "      <td>71805.0</td>\n",
       "      <td>06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        State  2011 Median Income  2017 Median Income Code\n",
       "0     Alabama             41415.0             48123.0   01\n",
       "1      Alaska             67825.0             73181.0   02\n",
       "2     Arizona             46709.0             56581.0   04\n",
       "3    Arkansas             38758.0             45869.0   05\n",
       "4  California             57287.0             71805.0   06"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "census_income_merged = pd.merge(census_income_2011_1, census_income_2017, how=\"inner\",on=\"State\",suffixes=(\"_2011\", \"_2017\"))\n",
    "census_income_merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>2011 Median Income</th>\n",
       "      <th>2017 Median Income</th>\n",
       "      <th>Mdn Percent Income Change</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>41415.0</td>\n",
       "      <td>48123.0</td>\n",
       "      <td>16.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>67825.0</td>\n",
       "      <td>73181.0</td>\n",
       "      <td>7.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>46709.0</td>\n",
       "      <td>56581.0</td>\n",
       "      <td>21.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>38758.0</td>\n",
       "      <td>45869.0</td>\n",
       "      <td>18.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>57287.0</td>\n",
       "      <td>71805.0</td>\n",
       "      <td>25.34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        State  2011 Median Income  2017 Median Income  \\\n",
       "0     Alabama             41415.0             48123.0   \n",
       "1      Alaska             67825.0             73181.0   \n",
       "2     Arizona             46709.0             56581.0   \n",
       "3    Arkansas             38758.0             45869.0   \n",
       "4  California             57287.0             71805.0   \n",
       "\n",
       "   Mdn Percent Income Change  \n",
       "0                      16.20  \n",
       "1                       7.90  \n",
       "2                      21.14  \n",
       "3                      18.35  \n",
       "4                      25.34  "
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#calculate %delata\n",
    "\n",
    "pd.options.mode.chained_assignment = None  # default='warn'\n",
    "\n",
    "census_income_delta = census_income_merged[\"Mdn Percent Income Change\"]\\\n",
    "=round((((census_income_merged[\"2017 Median Income\"]\\\n",
    "                                                           -census_income_merged[\"2011 Median Income\"])\\\n",
    "                                                          /census_income_merged[\"2011 Median Income\"])\\\n",
    "                                                         *100),2)\n",
    "\n",
    "\n",
    "census_income_merged[\"Mdn Percent Income Change\"]\\\n",
    "=census_income_merged[\"Mdn Percent Income Change\"].astype(float)\n",
    "\n",
    "census_income_merged=census_income_merged[[\"State\",\"2011 Median Income\", \"2017 Median Income\", \"Mdn Percent Income Change\"]]\n",
    "\n",
    "census_income_merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>2011 Median Income</th>\n",
       "      <th>2017 Median Income</th>\n",
       "      <th>Mdn Percent Income Change</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>41415.0</td>\n",
       "      <td>48123.0</td>\n",
       "      <td>16.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>67825.0</td>\n",
       "      <td>73181.0</td>\n",
       "      <td>7.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>46709.0</td>\n",
       "      <td>56581.0</td>\n",
       "      <td>21.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>38758.0</td>\n",
       "      <td>45869.0</td>\n",
       "      <td>18.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>57287.0</td>\n",
       "      <td>71805.0</td>\n",
       "      <td>25.34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        State  2011 Median Income  2017 Median Income  \\\n",
       "0     Alabama             41415.0             48123.0   \n",
       "1      Alaska             67825.0             73181.0   \n",
       "2     Arizona             46709.0             56581.0   \n",
       "3    Arkansas             38758.0             45869.0   \n",
       "4  California             57287.0             71805.0   \n",
       "\n",
       "   Mdn Percent Income Change  \n",
       "0                      16.20  \n",
       "1                       7.90  \n",
       "2                      21.14  \n",
       "3                      18.35  \n",
       "4                      25.34  "
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "census_income_merged = census_income_merged[census_income_merged.State != \"Puerto Rico\"]\n",
    "census_income_merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>2011 Median Income</th>\n",
       "      <th>2017 Median Income</th>\n",
       "      <th>Mdn Percent Income Change</th>\n",
       "      <th>rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>63124.0</td>\n",
       "      <td>82372.0</td>\n",
       "      <td>30.49</td>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Oregon</td>\n",
       "      <td>46816.0</td>\n",
       "      <td>60212.0</td>\n",
       "      <td>28.61</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Hawaii</td>\n",
       "      <td>61821.0</td>\n",
       "      <td>77765.0</td>\n",
       "      <td>25.79</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>57287.0</td>\n",
       "      <td>71805.0</td>\n",
       "      <td>25.34</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Washington</td>\n",
       "      <td>56835.0</td>\n",
       "      <td>70979.0</td>\n",
       "      <td>24.89</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   State  2011 Median Income  2017 Median Income  \\\n",
       "8   District of Columbia             63124.0             82372.0   \n",
       "37                Oregon             46816.0             60212.0   \n",
       "11                Hawaii             61821.0             77765.0   \n",
       "4             California             57287.0             71805.0   \n",
       "47            Washington             56835.0             70979.0   \n",
       "\n",
       "    Mdn Percent Income Change  rank  \n",
       "8                       30.49  51.0  \n",
       "37                      28.61  50.0  \n",
       "11                      25.79  49.0  \n",
       "4                       25.34  48.0  \n",
       "47                      24.89  47.0  "
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorteddf = census_income_merged.sort_values(\"Mdn Percent Income Change\",ascending=False)\n",
    "\n",
    "sorteddf['rank'] = sorteddf['Mdn Percent Income Change'].rank()\n",
    "sorteddf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# # PLot Results\n",
    "mdnincome11 = sorteddf[\"2011 Median Income\"]\n",
    "mdnincome17 = sorteddf[\"2011 Median Income\"]\n",
    "mdnincomepct = sorteddf[\"Mdn Percent Income Change\"]\n",
    "sorted_states = sorteddf[\"State\"]\n",
    "incomepct = sorteddf\n",
    "\n",
    "fig,ax=plt.subplots(figsize=(20,5))\n",
    "fig.subplots_adjust(bottom=0.35)\n",
    "plt.bar(sorted_states, mdnincomepct, color='teal', alpha=1, align=\"center\")\n",
    "# plt.tight_layout()\n",
    "plt.xticks(sorted_states, rotation='90')\n",
    "plt.title(\"Median Income Change Between 2011 and 2017\")\n",
    "plt.ylabel(\"Percent Change\")\n",
    "plt.grid()\n",
    "plt.show\n",
    "plt.savefig('/Users/rebeccajbooth/Documents/Images/Median Income Change Between 2011 and 2017.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   State  2011 Median Income  2017 Median Income  \\\n",
      "8   District of Columbia             63124.0             82372.0   \n",
      "37                Oregon             46816.0             60212.0   \n",
      "11                Hawaii             61821.0             77765.0   \n",
      "4             California             57287.0             71805.0   \n",
      "47            Washington             56835.0             70979.0   \n",
      "5               Colorado             55387.0             69117.0   \n",
      "42             Tennessee             41693.0             51340.0   \n",
      "21         Massachusetts             62859.0             77385.0   \n",
      "44                  Utah             55869.0             68358.0   \n",
      "19                 Maine             46033.0             56277.0   \n",
      "\n",
      "    Mdn Percent Income Change  rank  \n",
      "8                       30.49  51.0  \n",
      "37                      28.61  50.0  \n",
      "11                      25.79  49.0  \n",
      "4                       25.34  48.0  \n",
      "47                      24.89  47.0  \n",
      "5                       24.79  46.0  \n",
      "42                      23.14  45.0  \n",
      "21                      23.11  44.0  \n",
      "44                      22.35  43.0  \n",
      "19                      22.25  42.0  \n"
     ]
    }
   ],
   "source": [
    "sorteddf.to_csv(\"/Users/rebeccajbooth/Documents/PythonStuff/Project_1_BESTSTATE/Median Census Income.csv\", header=False, sep=';')\n",
    "print(sorteddf.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:PythonData]",
   "language": "python",
   "name": "conda-env-PythonData-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
